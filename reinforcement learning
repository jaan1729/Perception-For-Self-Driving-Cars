SHOW_PREVIEW = False
IM_WIDTH = 640
IM_HEIGHT = 480
class CarEnv:
    SHOW_CAM = SHOW_PREVIEW
    STEER_AMT = 1.0
    im_width = IM_WIDTH
    im_height = IM_HEIGHT
    front_camera = None

    def __init__(self):
        self.client = Carla.client("localhost", 2000)
        self.client.set_timeout(2.0)
        self.world = self.client.get_world()
        self.blueprint_library = self.world.get_blueprint_library()
        self.model_3 = self.blueprint_library.filter("model3")[0]
    def reset(self):
        self.collision_history = []
        self.actor_list = []
        self.transform = random.choice(self.world.get_map().get_spawn_points())
        self.actor_list.append(self.vehicle)
        rgb_cam = self.blueprint_library.find('sensor.camera.rgb')
        rgb_cam.set_attribute("image_size_x", f"{self.im_width}")
        rgb_cam.set_attribute("image_size_y", f"{self.im_height}")
        rgb_cam.set_attribute("fov", f"110")
        sensor_location = carla.Transform(carla.location(x=2.5, z = 0.8))
        self.rgb_cam = self.world.spawn_actor(rgb_cam, sensor_location, attach_to = self.vehicle)
        self.actor_list.append(self.rgb_cam)
        self.sensor.listen(lambda data : self.process_img(data))


        self.vehicle.apply_control(carla.VehicleControl(throttle = 0.0. brake = 0.0))
        time.sleep(4)
        col_sensor = self.blueprint_library.find("sensor.other.collision")
        self.col_sensor = self.world.spawn_actor(col_sensor, sensor_location, attcah_to = self.vehicle)
        self.actor_list.append(self.col_sensor)
        self.col_sensor.listen(lambda event : self.collision_data(event))

        while self.front_camera is None:
            time.sleep(0.01)
        self.episode_start = time.time()

        self.vehicle.apply_control(carla.VehicleControl(throttle = 0.0, brake = 0.0))
        return self.front_camera

    def collision_data(self, event):
        self.collision_hist.append(event)
    def process_img(self, img):

    def step(self, action):
        if action == 0:
            self.vehicle.apply_control(carla.VehicleControl(throttle = 0.5, steer = -1*self.STEER_AMT))
        if action == 1:
            self.vehicle.apply_control(carla.VehicleControl(throttle = 1.0, steer = 0*self.STEER_AMT))
        if action == 2:
            self.vehicle.apply_control(carla.VehicleControl(throttle = 0.5, steer = 1*self.STEER_AMT))
        
        v = self.vehicle.get_velocity()
        kmh = int(3.6 * math.sqrt(v.x**2 + v.y**2 + v.z**2))

        if collision_hist != 0:
            done = True
            reward = -200
        elif kmh < 50:
            done = False
            reward = -1
        else:
            done = False
            reward = 1
        if self.episode_start + SECONDS_PER_EPISODE < time.time()
            done = True
        return self.front_camera, reward, done, None 
